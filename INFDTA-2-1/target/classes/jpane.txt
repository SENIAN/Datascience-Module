http://localhost:9002/?
filebutton=&
ImageName=nginx%2Fhello-world&
ServiceAlias=HelloWorld1&
nameService=HelloWorld1%21&
selectContainters=1&
AutoRestart=Off
&nodeport=8145
&port=8014
&protocol=tcp
&createContainer=#/services


import javafx.embed.swing.JFXPanel;
import javafx.scene.shape.Ellipse;
import lombok.Data;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.io.*;
import java.util.*;
import java.util.List;
import java.awt.event.*;

import org.jfree.*;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;

/**
 * Created by Mohammed on 5/18/2016.
 */
/*

public class Settings extends JFrame {

    public List<Point> pointList;
    private static Settings instance = null;

    public static Settings getInstance() {
        if (instance == null) {
            instance = new Settings();
        }
        return instance;
    }

    public static void main(final String[] args) throws Throwable {
        AlgorithmK kmean = new AlgorithmK();
        kmean.fetchData();
        kmean.groupData();
        Settings.getInstance();
    }

    public Settings() {
        JFrame frame = new JFrame("Testing");
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(new PointPanel());
        frame.setSize(400,580);
       // frame.setResizable(false);
        frame.setVisible(true);
    }
}



class PointPanel extends JPanel {

    public List<Point> pointList;

    public PointPanel() {
        pointList = AlgorithmK.Observations;
        System.out.println(pointList);
        setBackground(Color.white);
    }

    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setPaint(Color.red);
        g2.scale(11,5);
        int w = getWidth();
        int h = getHeight();
        g2.setFont(new Font("Impact", Font.BOLD, 9));
        g2.drawString("Klanten", 20 ,10);
        g2.drawString("Wijnen", 10 ,120);
        System.out.println(getWidth() + "Width " + "" + getHeight());

        for (int i = 0; i < pointList.size(); i++) {
            Point p = ((Point) pointList.get(i));
            int y = p.y % w;
            int x = p.x % h;
            g2.drawLine(x, y, x, y);
        }
    }
}


